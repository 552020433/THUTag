package org.thunlp.tagsuggest.contentbase;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

import org.thunlp.io.JsonUtil;
import org.thunlp.io.TextFileReader;
import org.thunlp.learning.lda.LdaModel;
import org.thunlp.learning.lda.Similarity;
import org.thunlp.misc.WeightString;
import org.thunlp.tagsuggest.common.LegacyFeatureExtractor;
import org.thunlp.tagsuggest.common.Post;
import org.thunlp.tagsuggest.common.TagSuggest;

/**
 * LDA-KNN is the method proposed by Dong Zhang.
 * @author sixiance
 *
 */
public class LdaKnnKE implements TagSuggest {
  private static Logger LOG = Logger.getAnonymousLogger();
  JsonUtil J = new JsonUtil();
  private LdaModel model;
  private List<TagDistribution> knownTags;
  private Properties config = null;
  private LegacyFeatureExtractor extractor = new LegacyFeatureExtractor();
  
  private int numTags = 10;
  
  public static class TagDistribution {
    public String tag;
    public double [] topicDistribution;
  }
  
  @Override
  public void feedback(Post p) {
    // TODO Auto-generated method stub

  }

  @Override
  public void loadModel(String modelPath) throws IOException {
    // Load LDA model.
    model = new LdaModel();
    //model.loadModel(new File(modelPath, "lda").getAbsolutePath());
    model.loadModel(modelPath);
    
    // Load all tags.
    knownTags = loadTagDistrbutions(new File(modelPath, "tags"));
  }
  
  private List<TagDistribution> loadTagDistrbutions(File f) throws IOException {
    List<TagDistribution> tags = new LinkedList<TagDistribution>();
    TextFileReader r = new TextFileReader(f);
    String line;
    while ((line = r.readLine()) != null) {
      TagDistribution td = J.fromJson(line, TagDistribution.class);
      tags.add(td);
    }
    r.close();
    return tags;
  }

  @Override
  public void setConfig(Properties config) {
    this.config = config;
    numTags = Integer.parseInt(config.getProperty("numtags", "10"));
    extractor = new LegacyFeatureExtractor(config);
  }

  @Override
  public List<WeightString> suggest(Post p, StringBuilder explain) {
    String content = p.getTitle();
    content = extractor.clean(content);
    String [] words = extractor.getWords(content);
    double [] pz = model.inference(words);
    List<WeightString> suggestions = new ArrayList<WeightString>();
    for (TagDistribution td : knownTags) {
      double sim = Similarity.CosineSimilarity(pz, td.topicDistribution);
      suggestions.add(new WeightString(td.tag, sim));
    }
    Collections.sort(suggestions, new Comparator<WeightString>() {

      @Override
      public int compare(WeightString o1, WeightString o2) {
        return Double.compare(o2.weight, o1.weight);
      }
      
    });
    return suggestions.subList(0, Math.max(numTags, suggestions.size()));
  }

}
