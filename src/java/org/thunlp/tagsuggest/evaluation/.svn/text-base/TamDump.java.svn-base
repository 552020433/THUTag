package org.thunlp.tagsuggest.evaluation;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.logging.Logger;

import org.thunlp.io.JsonUtil;
import org.thunlp.io.RecordReader;
import org.thunlp.io.TextFileWriter;
import org.thunlp.misc.Flags;
import org.thunlp.misc.WeightString;
import org.thunlp.tagsuggest.common.Post;
import org.thunlp.tagsuggest.common.WordFeatureExtractor;
import org.thunlp.tagsuggest.contentbase.TagAllocationModel;
import org.thunlp.tagsuggest.contentbase.TagAllocationModel.Document;
import org.thunlp.tool.GenericTool;

import edu.stanford.nlp.util.StringUtils;

/**
 * All 'dirty' output and experiment go here.
 * @author sixiance
 *
 */
public class TamDump implements GenericTool {
  private static Logger LOG = Logger.getAnonymousLogger();
  Flags flags = new Flags();
  WordFeatureExtractor extractor = new WordFeatureExtractor();
  
  private void parseFlags(String [] args) {
    flags.add("input");
    flags.add("output");
    flags.add("model");
    flags.addWithDefaultValue("sample", "0.1");
    flags.parseAndCheck(args);
  }
  
  @Override
  public void run(String[] args) throws Exception {
    parseFlags(args);
    showTopNoiseTags();
  }
  
  private void showTopNoiseTags() throws IOException {
    TagAllocationModel model = new TagAllocationModel(flags.getFile("model"));
    List<WeightString> ptn = new ArrayList<WeightString>();
    
    for (String tag : model.getAllTags()) {
      ptn.add(new WeightString(tag, model.prt(TagAllocationModel.NOISE, tag)));
    }
    
    // Sort in descending order.
    Collections.sort(ptn, new Comparator<WeightString>() {
      @Override
      public int compare(WeightString o1, WeightString o2) {
        return Double.compare(o2.weight, o1.weight);
      }
    });
    System.out.println("Top");
    System.out.println(StringUtils.join(ptn.subList(0, 20), "\n"));
    
    // Sort in ascending order.
    Collections.sort(ptn, new Comparator<WeightString>() {
      @Override
      public int compare(WeightString o1, WeightString o2) {
        return Double.compare(o1.weight, o2.weight);
      }
    });
    System.out.println("Bottom");
    System.out.println(StringUtils.join(ptn.subList(0, 20), "\n"));
  }
  
  private void showExamples() throws IOException {
    RecordReader reader = new RecordReader(flags.getString("input"));
    TextFileWriter writer = 
      new TextFileWriter(flags.getString("output"), "UTF-8");
    JsonUtil J = new JsonUtil();
   
    File modelFile = new File(flags.getString("model"));
    TagAllocationModel model = new TagAllocationModel(modelFile);
    Random random = new Random();
    
    writer.writeLine("<html><head><link rel=\"stylesheet\" type=\"text/css\" "
        + "href=\"style.css\" /></head>");
    while (reader.next()) {
      if (reader.numRead() % 1000 == 0)
        LOG.info("Processed " + reader.numRead());
      if (random.nextDouble() > flags.getDouble("sample"))
        continue;
      Post p = J.fromJson(reader.value(), Post.class);
      String htmlSnippet = model.getHtmlResult(postToTamDoc(p), 100);
      
      writer.writeLine("<h2>" + p.getId() + "</h2>");
      writer.writeLine(htmlSnippet);
    }
    writer.writeLine("</html>");
    writer.close();
    reader.close();
  }

  private Document postToTamDoc(Post p) {
    String [] features = extractor.extract(p);
    Document d = new Document();
    d.words = features;
    d.tags = p.getTags().toArray(new String[0]);
    d.reason = new String[d.tags.length];
    return d;
  }
  
}
