package org.thunlp.tagsuggest.train;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Logger;

import org.thunlp.io.JsonUtil;
import org.thunlp.io.RecordReader;
import org.thunlp.misc.Flags;
import org.thunlp.tagsuggest.common.ConfigIO;
import org.thunlp.tagsuggest.common.ModelTrainer;
import org.thunlp.tagsuggest.common.Post;
import org.thunlp.tagsuggest.common.TagFilter;
import org.thunlp.tagsuggest.common.WordFeatureExtractor;
import org.thunlp.tagsuggest.contentbase.NoiseTagLdaModel;
import org.thunlp.tagsuggest.contentbase.NoiseTagLdaModel.Document;
import org.thunlp.text.Lexicon;
import org.thunlp.tool.GenericTool;

public class TrainNoiseTagLdaModel implements GenericTool, ModelTrainer {
  private static Logger LOG = Logger.getAnonymousLogger();
  WordFeatureExtractor extractor = null;
  Lexicon wordlex = new Lexicon();
  Lexicon taglex = new Lexicon();
  TagFilter tagFilter = null;
  JsonUtil J = new JsonUtil();
  
  @Override
  public void run(String[] args) throws Exception {
    Flags flags = new Flags();
    flags.add("input");
    flags.add("output");
    flags.add("config");
    flags.parseAndCheck(args);
    
    train(
        flags.getString("input"),
        flags.getString("output"),
        ConfigIO.configFromString(flags.getString("config"))
        );
  }
  
  public void train(String input, String output, Properties config)
  throws IOException {
    WordFeatureExtractor.buildLexicons(input, wordlex, taglex, config);
    extractor = new WordFeatureExtractor(config);
    extractor.setWordLexicon(wordlex);
    tagFilter = new TagFilter(config, taglex);
    List<Document> dataset = loadDocs(input, config.getProperty("fold", "-1"));
    int numTopics = Integer.parseInt(config.getProperty("numtopics", "64"));
    int numIterations = Integer.parseInt(config.getProperty("niter", "40"));
    NoiseTagLdaModel model = new NoiseTagLdaModel(numTopics);
    model.train(dataset, numIterations);
    BufferedOutputStream out = new BufferedOutputStream(
        new FileOutputStream(new File(output))
    );
    model.saveModel(out);
    out.close();
  }
  
  public  List<Document> loadDocs(String input, String fold) throws IOException {
    List<Document> docs = new ArrayList<Document>();
    Set<String> filtered = new HashSet<String>();
    // Load all docs.
    RecordReader reader = new RecordReader(input);
    List<String> tokens = new ArrayList<String>();
    while (reader.next()) {
      Post p = J.fromJson(reader.value(), Post.class);
      tokens.clear();
      if (!p.getExtras().equals(fold)) {
        String [] words = extractor.extract(p);
        tokens.addAll(Arrays.asList(words));
        tagFilter.filter(p.getTags(), filtered);
        if (tokens.size() > 0) {
          docs.add(new Document(tokens.toArray(new String[tokens.size()]),
              filtered.toArray(new String[filtered.size()])));
        }
      }
      if (docs.size() % 1000 == 0) {
        LOG.info(" ... " + docs.size());
      }
    }
    reader.close();
    LOG.info("load " + docs.size() + " docs.");
    return docs;
  }

}
